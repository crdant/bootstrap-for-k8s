#! /usr/bin/env bash
set -euo pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
project_dir=${script_dir}/..
config_dir=${project_dir}/config
overlay_dir=${project_dir}/overlays
secrets_dir=${project_dir}/secrets
work_dir=${project_dir}/work
product_dir="${work_dir}/tanzu-application-service"

main() {
  parse_args $@
  create_cluster 
  prepare_cluster
  download_tas
  deploy_tas
  clean_up
}

parse_args() {
  if [ $# -gt 0 ]; then
    while [ $# -gt 0 ]; do
      case $1 in
        --platform | -p)
          platform=${2}
          shift
          ;;
        --domain | -d)
          domain=${2}
          shift
          ;;
        --gcp-key-file | -g)
          gcp_key_file=${2}
          if [ -f ${gcp_key_file}.enc ] ; then
            cat ${gcp_key_file}.enc | keybase pgp decrypt > ${gcp_key_file}
            decrypted=true
          fi
          shift
          ;;
        --release | --release-version | -r)
          release_version=${2}
          shift
          ;;
        *)
          echo "Unrecognized option: $1" 1>&2
          exit 1
          ;;
      esac
      shift
    done
  fi

  set +u
  if [ -z "${platform}" ]; then
    platform="minikube"
  fi
  set -u
}

create_cluster() {
  if [ -z "${platform}" ]; then
    platform="minikube"
  fi

  eval "create_${platform}_cluster" 
}

create_minikube_cluster() {
  minikube start --profile tas --kubernetes-version v1.15.11 --container-runtime containerd \
    --cpus 6 --memory 10240 --disk-size 30gb 
  minikube profile tas
}

prepare_cluster() { 
  local static_ip="$(dig '*.'${domain} +short)"
  pd ${project_dir}
  (   
    vendir sync
    export YTT_TAS_PREPARE_metallb__pools__default__cidr="${static_ip}/28"
    export YTT_TAS_PREPARE_metallb__memberlist__secretkey=$(openssl rand -base64 128)
    export YTT_TAS_PREPARE_certmanager__solver__clouddns__keyfile="$(cat ${gcp_key_file})"
    # Deploy cluster prepartion 
    kapp deploy -a prepare -f <( ytt -f ${config_dir} \
                                   --file-mark "_github.com/**/*:type=yaml-plain" \
                                   --file-mark "_github.com/**/*/LICENSE:type=text-plain" \
                                   --data-values-env YTT_TAS_PREPARE ) -y
  ) 
}

download_tas() {
  local api_token=$(cat ${secrets_dir}/api-token.enc | keybase pgp decrypt)
  pivnet login --api-token ${api_token}
  
  local product_slug='pas-for-kubernetes'
  set +u
  if [ -z "${release_version}" ]; then
    release_version=$(pivnet releases --product-slug ${product_slug} --format json | jq -r '. | sort_by(.software_files_updated_at) | reverse | .[0].version')
  fi
  set -u

  pivnet download-product-files --product-slug='pas-for-kubernetes' \
    --release-version="${release_version}" \
    --download-dir ${work_dir} \
    --glob '*.tar'
    
  rm -rf ${product_dir}/*
  tar -C ${product_dir} -xf ${work_dir}/tanzu-application-service.${release_version}.tar
  rm ${product_dir}/custom-overlays/replace-loadbalancer-with-clusterip.yaml
  cp ${overlay_dir}/* ${product_dir}/custom-overlays
}

deploy_tas() {
  local values_file="${work_dir}/deployment-values.yml"
  local static_ip="$(dig '*.'${domain} +short)"
  pd ${product_dir}
  (
    export YTT_TAS_system_registry__hostname="registry.pivotal.io"
    export YTT_TAS_system_registry__username="$(cat ${secrets_dir}/pivnet.json.enc | keybase pgp decrypt | jq -r .username)"
    export YTT_TAS_system_registry__password="$(cat ${secrets_dir}/pivnet.json.enc | keybase pgp decrypt | jq -r .password)"
    export YTT_TAS_istio_static_ip=${static_ip}

    config/cf-for-k8s/hack/generate-values.sh -d "${domain}" -g "${gcp_key_file}" > ${values_file}
    hack/generate-values.sh -d "${domain}" -g "${gcp_key_file}" >> custom-overlays/kpack-values.yaml 
    bin/install-tas.sh ${values_file}
  )
  pop
  enable_docker
}

clean_up () {
  set +u
  if [ -n ${decrypted} ] ; then
    rm -f ${gcp_key_file}
  fi
  set -u
}

enable_docker() {
  cf_login
  cf enable-feature-flag diego_docker
}

cf_login() {
  password=$(cat ../deployment-values.yml | yq -r .cf_admin_password)
  system_domain=$(cat ../deployment-values.yml | yq -r .system_domain)
  cf login -a https://api.${system_domain} -u admin -p ${password} -o system
}

pause_for() {
  message=${1}
  time=${2}

  i=1
  sp="/-\|"
  echo -n "Giving ${message} time to complete... "
  while [ ${i} -lt ${time} ];
  do
    printf "\b${sp:i++%${#sp}:1}"
    sleep 1
  done
  echo
}

pd () {
  local directory=${1}
  pushd ${directory} > /dev/null
}

pop() {
  popd > /dev/null
}

main $@
